import traceback
import sys
import logging
from datetime import datetime

# ロギングの設定
logging.basicConfig(
    level=logging.ERROR,
    format='%(asctime)s - %(levelname)s - %(message)s',
    filename=f'error_log_{datetime.now().strftime("%Y%m%d")}.log'
)

def safe_add(a, b):
    """
    二つの値を安全に足し算する関数
    予期せぬエラーが発生した場合はログに記録し、適切に処理する
    """
    try:
        result = a + b
        return result
    except Exception as e:
        # 予期せぬエラーの詳細情報を取得
        error_type = type(e).__name__
        error_msg = str(e)
        
        # トレースバック情報を文字列として取得
        tb_info = traceback.format_exc()
        
        # エラー情報をログに記録
        logging.error(f"予期せぬエラーが発生しました: {error_type} - {error_msg}")
        logging.error(f"トレースバック情報:\n{tb_info}")
        
        # ユーザーへの表示
        print(f"申し訳ありませんが、計算中に問題が発生しました。")
        print(f"エラー種類: {error_type}")
        print(f"エラー内容: {error_msg}")
        
        # 運用者向けのデバッグ情報（本番環境では無効化する）
        if __debug__:
            print("\n--- デバッグ情報 ---")
            print(tb_info)
        
        # エラーフラグと共に結果を返す（呼び出し元での判定用）
        return None, False

def process_calculation(value1, value2):
    """
    計算処理のメイン関数
    様々な入力に対応し、予期せぬエラーを適切に処理する
    """
    print(f"'{value1}'と'{value2}'の計算を実行します...")
    
    # 入力値の検証（この部分は要件に応じて調整）
    try:
        # 数値に変換を試みる
        num1 = float(value1) if value1 is not None else 0
        num2 = float(value2) if value2 is not None else 0
        
        # 足し算実行
        result = safe_add(num1, num2)
        
        # 結果表示
        if isinstance(result, tuple) and result[1] is False:
            print("計算は完了できませんでした。")
            return False
        else:
            print(f"計算結果: {result}")
            return True
            
    except ValueError:
        print("無効な入力です。数値を入力してください。")
        return False
    except Exception as unexpected_error:
        # 本来ここには到達しないはずだが、万が一の場合の対応
        print(f"予期せぬエラーが発生しました: {unexpected_error}")
        logging.critical(f"処理できなかった重大なエラー: {unexpected_error}")
        logging.critical(traceback.format_exc())
        return False

# テスト実行
print("===== 正常なケース =====")
process_calculation(5, 3)

print("\n===== Noneを含むケース =====")
process_calculation(None, 10)

print("\n===== 文字列入力のケース =====")
process_calculation("abc", "5")

# 通常はエラーとなるケースをtry-exceptで囲んでいるため
# safe_add関数内の例外処理が機能することを示すために
# 通常では発生しにくい状況を作り出す
print("\n===== 特殊なケース =====")
class CustomObject:
    pass

# このケースでは__add__メソッドが定義されていないオブジェクト同士の
# 加算を試みるため、予期せぬエラーとして捕捉される
process_calculation(CustomObject(), 5)

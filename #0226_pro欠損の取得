import pandas as pd
import sys
import os
import numpy as np


class ExcelDataFrameDebugger:
    """
    Excelファイルからデータフレームを取得し、デバッグ情報を出力するクラス
    """

    def __init__(self, file_path):
        """
        コンストラクタ

        Parameters:
        file_path (str): Excelファイルのパス
        """
        self.file_path = file_path
        self.excel_file = None
        self.sheet_names = []

        # ファイルの存在確認
        if not os.path.exists(file_path):
            print(f"エラー: ファイル '{file_path}' が存在しません。", file=sys.stderr)
        else:
            try:
                self.excel_file = pd.ExcelFile(file_path)
                self.sheet_names = self.excel_file.sheet_names
                print(f"ファイル '{file_path}' を読み込みました。")
                print(f"利用可能なシート: {', '.join(self.sheet_names)}")
            except Exception as e:
                print(f"ファイル読み込みエラー: {e}", file=sys.stderr)

    def get_sheet_names(self):
        """シート名のリストを返す"""
        return self.sheet_names

    def get_dataframe(self, sheet_name):
        """
        指定されたシートからデータフレームを取得

        Parameters:
        sheet_name (str): シート名

        Returns:
        pandas.DataFrame: 指定されたシートのデータフレーム
        """
        if not self.excel_file:
            print("Excel ファイルが正しく読み込まれていません。", file=sys.stderr)
            return pd.DataFrame()

        if sheet_name not in self.sheet_names:
            print(f"エラー: シート '{sheet_name}' は存在しません。", file=sys.stderr)
            print(f"利用可能なシート: {', '.join(self.sheet_names)}")
            return pd.DataFrame()

        try:
            df = pd.read_excel(self.file_path, sheet_name=sheet_name)
            print(f"シート '{sheet_name}' からデータフレームを取得しました。")
            return df
        except Exception as e:
            print(f"データフレーム取得エラー: {e}", file=sys.stderr)
            return pd.DataFrame()

    def analyze_missing_values(self, df):
        """
        データフレームの欠損値を詳細に分析

        Parameters:
        df (pandas.DataFrame): 分析対象のデータフレーム

        Returns:
        tuple: (列ごとの欠損値数, 行ごとの欠損値数, 欠損値の総数)
        """
        if df.empty:
            print("データフレームが空です。欠損値分析できません。")
            return None, None, 0

        # 列ごとの欠損値数
        missing_by_column = df.isnull().sum()

        # 行ごとの欠損値数
        missing_by_row = df.isnull().sum(axis=1)

        # 欠損値の総数
        total_missing = df.isnull().sum().sum()

        return missing_by_column, missing_by_row, total_missing

    def print_missing_values_report(self, df):
        """
        欠損値の詳細レポートを出力

        Parameters:
        df (pandas.DataFrame): 分析対象のデータフレーム
        """
        missing_by_column, missing_by_row, total_missing = self.analyze_missing_values(
            df
        )

        if missing_by_column is None:
            return

        total_cells = df.size
        missing_percentage = (total_missing / total_cells) * 100

        print("\n===== 欠損値分析レポート =====")
        print(f"データフレームの総セル数: {total_cells}")
        print(f"欠損値の総数: {total_missing} ({missing_percentage:.2f}%)")

        # 列ごとの欠損値レポート
        print("\n----- 列ごとの欠損値 -----")
        columns_with_missing = missing_by_column[missing_by_column > 0]
        if len(columns_with_missing) > 0:
            missing_columns_df = pd.DataFrame(
                {
                    "欠損値数": columns_with_missing,
                    "行数": len(df),
                    "欠損率(%)": (columns_with_missing / len(df) * 100).round(2),
                }
            )
            print(missing_columns_df.sort_values("欠損値数", ascending=False))
        else:
            print("列に欠損値はありません。")

        # 行ごとの欠損値の集計
        print("\n----- 行の欠損値の統計 -----")
        rows_with_missing = missing_by_row[missing_by_row > 0]
        if len(rows_with_missing) > 0:
            # 行の欠損値数の分布を計算
            missing_counts = rows_with_missing.value_counts().sort_index()
            missing_counts_df = pd.DataFrame(
                {
                    "欠損値を含む列数": missing_counts.index,
                    "該当する行数": missing_counts.values,
                    "パーセント": (missing_counts.values / len(df) * 100).round(2),
                }
            )
            print(
                f"欠損値を含む行数: {len(rows_with_missing)}行 (全{len(df)}行中 {len(rows_with_missing)/len(df)*100:.2f}%)"
            )
            print(missing_counts_df)

            # 特に欠損値の多い行の例を表示
            if len(rows_with_missing) > 0:
                max_missing = rows_with_missing.max()
                print(f"\n----- 最も欠損値の多い行 (欠損値数: {max_missing}) -----")
                most_missing_row_idx = missing_by_row.idxmax()
                print(f"行インデックス: {most_missing_row_idx}")
                print(df.iloc[most_missing_row_idx : most_missing_row_idx + 1])
        else:
            print("行に欠損値はありません。")

    def debug_print_dataframe(self, df, max_rows=5):
        """
        データフレームのデバッグ情報を出力

        Parameters:
        df (pandas.DataFrame): デバッグ出力するデータフレーム
        max_rows (int): 表示する最大行数
        """
        if df.empty:
            print("データフレームが空です。")
            return

        print("\n===== データフレームのデバッグ情報 =====")
        print(f"形状: {df.shape} (行数 × 列数)")
        print(f"列名: {list(df.columns)}")

        print("\n----- データ型 -----")
        print(df.dtypes)

        print(f"\n----- 先頭 {max_rows} 行 -----")
        print(df.head(max_rows))

        numeric_cols = df.select_dtypes(include=["number"]).columns
        if len(numeric_cols) > 0:
            print("\n----- 数値データの基本統計量 -----")
            print(df[numeric_cols].describe())

        # 詳細な欠損値レポートを出力
        self.print_missing_values_report(df)

        print("\n----- メモリ使用量 -----")
        print(f"{df.memory_usage(deep=True).sum() / 1024 / 1024:.2f} MB")


# 実際にクラスをインスタンス化して使用
if __name__ == "__main__":
    file_path = r"C:\Users\yukik\Desktop\ex\0226test_log\in1.xlsx"

    # インスタンス作成
    excel_debugger = ExcelDataFrameDebugger(file_path)

    # シート名一覧を取得
    sheet_names = excel_debugger.get_sheet_names()

    if "アウトプット" in sheet_names:
        # アウトプットシートのデータフレームを取得
        df_output = excel_debugger.get_dataframe("データフレーム")

        # デバッグ情報を出力
        excel_debugger.debug_print_dataframe(df_output)
    else:
        print("「アウトプット」シートが見つかりませんでした。")
        print("利用可能なシートから選択してください:")
        for i, name in enumerate(sheet_names, 1):
            print(f"{i}. {name}")

        # 例として最初のシートを使用
        if sheet_names:
            first_sheet = sheet_names[0]
            print(f"\n最初のシート '{first_sheet}' を使用します。")
            df_first = excel_debugger.get_dataframe(first_sheet)
            excel_debugger.debug_print_dataframe(df_first)

#0226_pro欠損の取得

# excel_type_checker.py

import pandas as pd
import os
import numpy as np
from datetime import datetime

def check_excel_cell_types(file_path, sheet_name, column_types, header_row=1):
    """
    指定されたExcelファイルの特定列でデータ型をチェックする関数
    
    Parameters:
    -----------
    file_path : str
        Excelファイルのパス
    sheet_name : str
        チェック対象のシート名
    column_types : dict
        列名とその期待される型の辞書 (例: {'列A': 'int', '列B': 'float', '列C': 'date'})
        サポートされる型: 'int', 'float', 'date', 'string', 'bool'
    header_row : int, default=1
        ヘッダー行のインデックス（デフォルトは2行目=インデックス1）
    
    Returns:
    --------
    dict
        チェック結果を含む辞書
    """
    result = {
        'status': 0,  # デフォルト：型エラーなし
        'total_type_errors': 0,
        'errors_by_column': {},
        'error_locations': [],
        'message': ''
    }
    
    try:
        # ファイルの存在確認
        if not os.path.exists(file_path):
            result['status'] = 9
            result['message'] = f"エラー: ファイル '{file_path}' が見つかりません"
            return result
        
        # Excel ファイルを読み込む
        try:
            # まず利用可能なシートを確認
            excel_file = pd.ExcelFile(file_path)
            if sheet_name not in excel_file.sheet_names:
                result['status'] = 9
                result['message'] = f"エラー: シート '{sheet_name}' はファイル内に存在しません"
                return result
                
            # ヘッダー行を指定してシートを読み込む - データ型を保持するためコンバート指定なし
            df = pd.read_excel(file_path, sheet_name=sheet_name, header=header_row)
            
            print(f"ヘッダー行（{header_row+1}行目）: {list(df.columns)}")
            
        except Exception as e:
            result['status'] = 9
            result['message'] = f"Excel読み込みエラー: {e}"
            return result
        
        # チェック対象の列を検証
        valid_columns = []
        for col in column_types.keys():
            if col in df.columns:
                valid_columns.append(col)
            else:
                print(f"警告: 列 '{col}' はシート '{sheet_name}' に存在しません")
        
        if not valid_columns:
            result['status'] = 9
            result['message'] = f"エラー: 指定された列は '{sheet_name}' シートに存在しません"
            return result
        
        # 列ごとに型チェック
        for col in valid_columns:
            expected_type = column_types[col].lower()
            # 結果辞書に列エントリを初期化
            result['errors_by_column'][col] = 0
            
            # 空白セルを除外して型チェック
            non_empty_mask = ~(df[col].isnull() | (df[col].astype(str).str.strip() == ''))
            non_empty_indices = df.index[non_empty_mask].tolist()
            
            # 型ごとにチェック関数を適用
            type_check_failures = []
            
            for idx in non_empty_indices:
                cell_value = df.loc[idx, col]
                type_error = False
                
                # 型チェック
                if expected_type == 'int':
                    # 整数型チェック
                    if isinstance(cell_value, (int, np.int64, np.int32)):
                        continue
                    try:
                        int_val = int(float(str(cell_value).strip()))
                        if float(str(cell_value).strip()) == int_val:
                            continue
                        type_error = True
                    except (ValueError, TypeError):
                        type_error = True
                
                elif expected_type == 'float':
                    # 浮動小数点型チェック
                    if isinstance(cell_value, (float, np.float64, np.float32)):
                        continue
                    try:
                        float(str(cell_value).strip())
                        continue
                    except (ValueError, TypeError):
                        type_error = True
                
                elif expected_type == 'date':
                    # 日付型チェック
                    if isinstance(cell_value, (datetime, pd.Timestamp)):
                        continue
                    try:
                        # 多様な日付形式を試行
                        date_formats = [
                            '%Y/%m/%d', '%Y-%m-%d', '%Y年%m月%d日',
                            '%Y/%m/%d %H:%M:%S', '%Y-%m-%d %H:%M:%S'
                        ]
                        is_date = False
                        for fmt in date_formats:
                            try:
                                datetime.strptime(str(cell_value).strip(), fmt)
                                is_date = True
                                break
                            except ValueError:
                                continue
                        
                        if not is_date:
                            type_error = True
                    except Exception:
                        type_error = True
                
                elif expected_type == 'bool':
                    # 論理型チェック
                    if isinstance(cell_value, (bool, np.bool_)):
                        continue
                    try:
                        str_val = str(cell_value).strip().lower()
                        if str_val in ['true', 'false', '1', '0', 'yes', 'no', 'はい', 'いいえ']:
                            continue
                        type_error = True
                    except Exception:
                        type_error = True
                
                elif expected_type == 'string':
                    # 文字列型は基本的に全て許容
                    continue
                
                else:
                    print(f"警告: 未知の型指定 '{expected_type}' が列 '{col}' に指定されました")
                    continue
                
                # 型エラーを記録
                if type_error:
                    type_check_failures.append(idx)
            
            # 型エラーを記録
            result['errors_by_column'][col] = len(type_check_failures)
            result['total_type_errors'] += len(type_check_failures)
            
            # 型エラーのセル位置を記録
            for idx in type_check_failures:
                # Excel の行番号 (0始まりインデックス + ヘッダー + 2)
                # ヘッダーが2行目（インデックス1）の場合、データは3行目から始まる
                excel_row = idx + header_row + 2
                
                # 列の文字 (A, B, C, ...)
                col_idx = df.columns.get_loc(col)
                col_letter = get_excel_column_letter(col_idx)
                
                result['error_locations'].append({
                    'column': col,
                    'row_index': idx,
                    'excel_row': excel_row,
                    'cell_ref': f"{col_letter}{excel_row}",
                    'expected_type': expected_type,
                    'actual_value': str(df.loc[idx, col])
                })
        
        # 結果判定
        if result['total_type_errors'] > 0:
            result['status'] = 1
            result['message'] = f"合計 {result['total_type_errors']} 箇所の型エラーが見つかりました"
        else:
            result['status'] = 0
            result['message'] = "全ての指定列のデータ型は正しいです"
        
        return result
        
    except Exception as e:
        result['status'] = 9
        result['message'] = f"予期せぬエラーが発生しました: {e}"
        return result

def get_excel_column_letter(col_idx):
    """
    列インデックスからExcel列文字（A, B, ... Z, AA, AB, ...）を取得
    
    Parameters:
    -----------
    col_idx : int
        0始まりの列インデックス
    
    Returns:
    --------
    str
        Excel列文字
    """
    letter = ""
    while col_idx >= 0:
        letter = chr(65 + (col_idx % 26)) + letter
        col_idx = col_idx // 26 - 1
    return letter

def display_type_check_results(result):
    """
    型チェックの結果を整形して表示する関数
    
    Parameters:
    -----------
    result : dict
        check_excel_cell_typesの戻り値
    
    Returns:
    --------
    int
        ステータスコード
    """
    print(f"\n===== データ型チェック結果 =====")
    print(f"ステータス: {result['status']}")
    print(f"メッセージ: {result['message']}")
    
    if result['status'] == 1:  # 型エラーあり
        print(f"\n列ごとの型エラー数:")
        for col, count in result['errors_by_column'].items():
            if count > 0:
                print(f"  列 '{col}': {count} セル")
        
        print(f"\n型エラーの詳細:")
        for loc in result['error_locations']:
            print(f"  セル {loc['cell_ref']} (行 {loc['excel_row']}, 列 '{loc['column']}')")
            print(f"    期待される型: {loc['expected_type']}")
            print(f"    実際の値: {loc['actual_value']}")
    
    elif result['status'] == 0:  # 型エラーなし
        print("全ての指定列のデータ型は正しいです")
    
    return result['status']

# このファイルが直接実行された場合のテストコード
if __name__ == "__main__":
    print("このファイルは、他のファイルからインポートして使用してください。")
    print("テスト実行する場合は以下のコメントを解除してください。")
    
    """
    # テスト用パラメータを設定
    file_path = "example.xlsx"
    sheet_name = "Sheet1"
    column_types = {
        "列A": "int",
        "列B": "float", 
        "列C": "date",
        "列D": "string",
        "列E": "bool"
    }
    header_row = 1  # 2行目をヘッダーとして使用
    
    # テスト実行
    result = check_excel_cell_types(file_path, sheet_name, column_types, header_row)
    display_type_check_results(result)
    """
#＃Excel型チェック機能モジュール
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
#Excelの検証メイン
# main_validator.py

import argparse
import sys

# 両方のチェッカーモジュールをインポート
from excel_empty_checker import check_excel_empty_cells_with_header_row, display_empty_cell_check_results
from excel_type_checker import check_excel_cell_types, display_type_check_results

def main():
    """
    Excelファイルの空白セルと型をチェックするメイン関数
    """
    # コマンドライン引数の解析
    parser = argparse.ArgumentParser(description='Excelファイルの検証（空白チェックと型チェック）を実行します')
    parser.add_argument('--file', required=True, help='Excelファイルのパス')
    parser.add_argument('--sheet', required=True, help='シート名')
    parser.add_argument('--empty-check-columns', help='空白チェックする列名（カンマ区切り）')
    parser.add_argument('--type-check', help='型チェック定義（列名:型,列名:型,...形式。例: A:int,B:date）')
    parser.add_argument('--header-row', type=int, default=1, help='ヘッダー行のインデックス（0始まり、デフォルトは1=2行目）')
    
    args = parser.parse_args()
    
    # ファイル情報を表示
    print(f"検証ファイル: {args.file}")
    print(f"シート名: {args.sheet}")
    print(f"ヘッダー行: {args.header_row+1}行目")
    
    status = 0
    
    # 空白チェック
    if args.empty_check_columns:
        # 列名をリストに変換
        empty_check_columns = [col.strip() for col in args.empty_check_columns.split(',')]
        print(f"\n空白チェック対象列: {', '.join(empty_check_columns)}")
        
        # 空白チェック実行
        empty_result = check_excel_empty_cells_with_header_row(
            file_path=args.file,
            sheet_name=args.sheet,
            column_names=empty_check_columns,
            header_row=args.header_row
        )
        
        # 結果表示
        empty_status = display_empty_cell_check_results(empty_result)
        
        # ステータスを更新（エラーがあればステータスを上書き）
        if empty_status > status:
            status = empty_status
    
    # 型チェック
    if args.type_check:
        # 型定義を辞書に変換
        type_check_dict = {}
        type_pairs = [pair.strip() for pair in args.type_check.split(',')]
        
        for pair in type_pairs:
            if ':' in pair:
                col, col_type = pair.split(':', 1)
                type_check_dict[col.strip()] = col_type.strip()
        
        print(f"\n型チェック定義:")
        for col, col_type in type_check_dict.items():
            print(f"  列 '{col}': {col_type}")
        
        # 型チェック実行
        type_result = check_excel_cell_types(
            file_path=args.file,
            sheet_name=args.sheet,
            column_types=type_check_dict,
            header_row=args.header_row
        )
        
        # 結果表示
        type_status = display_type_check_results(type_result)
        
        # ステータスを更新（エラーがあればステータスを上書き）
        if type_status > status:
            status = type_status
    
    # 総合結果
    print("\n===== 検証結果サマリー =====")
    if status == 0:
        print("✅ 全てのチェックに合格しました")
    elif status == 1:
        print("⚠️ 検証エラーがあります")
    else:
        print("❌ 検証プロセスでエラーが発生しました")
    
    return status

if __name__ == "__main__":
    # メイン関数実行
    status = main()
    
    # 終了コードとしてステータスを返す
    sys.exit(status)



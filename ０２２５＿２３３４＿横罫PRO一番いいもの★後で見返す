import pandas as pd
import numpy as np
import os


def validate_excel_sums_with_company_cells(file_path, sheet_name="correct"):
    """
    Excelファイルのデータを検証し、A列の値と横方向の合計が一致するか確認する関数。
    不一致の場合は、関連する企業セルを「A2 と B1」の形式で取得します。

    Parameters:
    -----------
    file_path : str
        Excelファイルのパス
    sheet_name : str, default="correct"
        検証対象のシート名

    Returns:
    --------
    tuple
        (result_df, company_pairs)
        result_df: 検証結果のデータフレーム
        company_pairs: 不一致時の企業セルペア情報のリスト
    """
    try:
        # デバッグ: ファイル読み込み開始
        print(f"ファイルパス: {file_path}")
        print(f"シート名: {sheet_name}")

        # 企業名セルを取得（ヘッダー行のセル）
        df_header = pd.read_excel(
            file_path, sheet_name=sheet_name, header=None, nrows=1
        )
        company_cells = []
        for col_idx in range(1, len(df_header.columns)):
            col_letter = chr(65 + col_idx)  # B, C, D...
            company_cells.append(f"{col_letter}1")

        # Excelを読み込む（データ部分）
        df = pd.read_excel(file_path, sheet_name=sheet_name)

        # A列（総合計）のデータ
        total_A = df.iloc[:, 0]  # A列（1列目）

        # B列以降のデータ（数値化して合計）
        columns_B_onward = df.iloc[:, 1:]
        columns_B_onward_numeric = columns_B_onward.apply(
            pd.to_numeric, errors="coerce"
        )
        total_other = columns_B_onward_numeric.sum(axis=1)

        # 差分の計算
        diff = total_A - total_other

        # 一致確認 - pandas Seriesに変換
        is_match = pd.Series(np.isclose(total_A, total_other), index=total_A.index)

        # 結果のデータフレーム作成
        result_df = pd.DataFrame(
            {
                "A列の値": total_A,
                "横方向の合計": total_other,
                "差分": diff,
                "一致": is_match,
            }
        )

        # 不一致の行を抽出して、関連する企業セルを取得
        mismatch_rows = result_df[~result_df["一致"]]

        # 企業セルペア情報を格納するリスト
        company_pairs = []

        if not mismatch_rows.empty:
            print("\n不一致の行が見つかりました。企業セル情報を取得します。")

            for idx in mismatch_rows.index:
                row_num = (
                    idx + 1
                )  # データフレームのインデックス（0始まり）から行番号（1始まり）へ
                a_cell = f"A{row_num + 1}"  # ヘッダー行があるため+1

                # 企業列の情報
                for col_idx, company_cell in enumerate(company_cells):
                    if col_idx < len(columns_B_onward.columns):
                        cell_value = columns_B_onward_numeric.iloc[idx, col_idx]
                        if pd.notna(cell_value) and cell_value != 0:
                            # セルペア情報を追加
                            company_pairs.append(
                                {
                                    "a_cell": a_cell,
                                    "company_cell": company_cell,
                                    "a_value": total_A.iloc[idx],
                                    "company_value": cell_value,
                                    "row_index": idx,
                                }
                            )

        return result_df, company_pairs

    except Exception as e:
        print(f"\n❌ エラーが発生しました: {e}")
        import traceback

        traceback.print_exc()
        return None, []


def process_excel_validation_with_companies(file_path, sheet_name="correct"):
    """
    Excelファイルの検証を実行し、結果と不一致時の企業セル情報を出力する関数

    Parameters:
    -----------
    file_path : str
        Excelファイルのパス
    sheet_name : str, default="correct"
        検証対象のシート名
    """
    print("\n===== Excel横行計算検証処理の開始 =====")

    # ファイルの存在確認
    if not os.path.exists(file_path):
        print(f"❌ エラー: ファイル '{file_path}' が見つかりません")
        return

    print(f"✅ ファイル '{file_path}' を処理します")

    # 検証実行
    result_df, company_pairs = validate_excel_sums_with_company_cells(
        file_path, sheet_name
    )

    if result_df is not None:
        # 検証結果のサマリー
        match_count = result_df["一致"].sum()
        total_count = len(result_df)

        print("\n===== 検証結果サマリー =====")
        print(f"✅ 検証完了: 合計 {total_count} 行")
        print(f"✅ 一致: {match_count} 行 ({match_count/total_count*100:.1f}%)")
        print(
            f"❌ 不一致: {total_count - match_count} 行 ({(total_count - match_count)/total_count*100:.1f}%)"
        )

        # 不一致がある場合の処理
        if match_count < total_count:
            print("\n不一致の行があります。")

            # 不一致の行ごとに企業セル情報を表示
            print("\n=== シンプルな表記 ===")
            mismatch_row_indices = set()

            for pair in company_pairs:
                print(f"{pair['a_cell']} と {pair['company_cell']}")
                mismatch_row_indices.add(pair["row_index"])

            # 不一致の詳細分析
            print("\n=== 不一致の詳細分析 ===")
            for idx in mismatch_row_indices:
                row_pairs = [p for p in company_pairs if p["row_index"] == idx]
                a_cell = row_pairs[0]["a_cell"] if row_pairs else f"A{idx+2}"
                a_value = (
                    row_pairs[0]["a_value"] if row_pairs else result_df.iloc[idx, 0]
                )
                sum_value = result_df.iloc[idx, 1]
                diff_value = result_df.iloc[idx, 2]

                print(f"\n行 {idx+2} の分析:")
                print(f"A列セル: {a_cell}, 値: {a_value}")
                print(f"横方向の合計: {sum_value}")
                print(f"差分: {diff_value}")

                if row_pairs:
                    print("関連する企業セル:")
                    for pair in row_pairs:
                        print(f"  {pair['company_cell']}: {pair['company_value']}")
        else:
            print("\nすべての行でA列の値と横方向の合計が一致しています。👍")

    print("\n===== Excel横行計算検証処理の終了 =====")

    # ステータスコードを返す
    if result_df is None:
        return 9  # エラー
    elif match_count == total_count:
        return 0  # 全て一致
    else:
        return 1  # 一部不一致


if __name__ == "__main__":
    file_path = "C:\\Users\\yukik\\Desktop\\ex\\0225test_yokokei\\yokokei.xlsx"
    sheet_name = "correct"

    # 検証実行
    status_code = process_excel_validation_with_companies(file_path, sheet_name)
    print(f"\nステータスコード: {status_code}")

#0225_23:22_横罫とA列が一致するか確認する。＆企業名を取得するコードＰＲＯＯＫ
